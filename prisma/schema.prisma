// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String
  password      String?
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  userRoles     UserRole[]
  trainingPlans TrainingPlan[]
  students      Student[]
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  role      Role
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

enum Gender {
  M
  F
  O
}

model Student {
  id                     String                   @id @default(cuid())
  userId                 String?
  name                   String
  email                  String                   @unique
  dateOfBirth            DateTime
  gender                 Gender
  heightInMt             Float?
  weightInKg             Float?
  isActive               Boolean?                 @default(true)
  createdAt              DateTime                 @default(now())
  StudentExercise        StudentExercise[]
  StudentExerciseHistory StudentExerciseHistory[]
  TrainingPlan           TrainingPlan[]
  User                   User?                    @relation(fields: [userId], references: [id])
}

model Muscle {
  id        String     @id @default(cuid())
  name      String
  isActive  Boolean?   @default(true)
  exercises Exercise[]
  createdAt DateTime   @default(now())
}

model Exercise {
  id                     String                   @id @default(cuid())
  name                   String
  muscleId               String
  description            String?                  @db.VarChar(1000)
  isActive               Boolean                  @default(true)
  createdAt              DateTime                 @default(now())
  muscle                 Muscle                   @relation(fields: [muscleId], references: [id])
  StudentExercise        StudentExercise[]
  StudentExerciseHistory StudentExerciseHistory[]
  TrainingPlanExercise   TrainingPlanExercise[]
}

model TrainingPlan {
  id                   String                 @id @default(cuid())
  studentId            String
  name                 String
  isActive             Boolean?               @default(true)
  order                Int                    @default(0)
  createdByUserId      String
  createdAt            DateTime               @default(now())
  trainingPlanHistory  TrainingPlanHistory[]
  user                 User                   @relation(fields: [createdByUserId], references: [id])
  student              Student                @relation(fields: [studentId], references: [id])
  TrainingPlanExercise TrainingPlanExercise[]
}

model TrainingPlanExercise {
  id                String       @id @default(cuid())
  treiningPlanId    String
  exerciseId        String
  intervalInSeconds Int?
  order             Int          @default(0)
  createdAt         DateTime     @default(now())
  trainingPlan      TrainingPlan @relation(fields: [treiningPlanId], references: [id])
  exercise          Exercise     @relation(fields: [exerciseId], references: [id])
}

model StudentExercise {
  id         String   @id @default(cuid())
  studentId  String
  exerciseId String
  weightInKg Float
  createdAt  DateTime @default(now())
  student    Student  @relation(fields: [studentId], references: [id])
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
}

model TrainingPlanHistory {
  id             String       @id @default(cuid())
  treiningPlanId String
  startDate      DateTime?
  endDate        DateTime?
  treiningPlan   TrainingPlan @relation(fields: [treiningPlanId], references: [id])
}

model StudentExerciseHistory {
  id         String    @id @default(cuid())
  studentId  String
  exerciseId String
  startDate  DateTime?
  endDate    DateTime?
  createdAt  DateTime  @default(now())
  student    Student   @relation(fields: [studentId], references: [id])
  exercise   Exercise  @relation(fields: [exerciseId], references: [id])
}
